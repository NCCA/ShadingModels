#include <QMouseEvent>
#include <QGuiApplication>
#include <QFont>
#include "NGLScene.h"
#include <ngl/NGLInit.h>
#include <ngl/VAOPrimitives.h>
#include <ngl/ShaderLib.h>
#include <ngl/NGLStream.h>

//----------------------------------------------------------------------------------------------------------------------
/// @brief the increment for x/y translation with mouse movement
//----------------------------------------------------------------------------------------------------------------------
const static float INCREMENT = 0.01f;
//----------------------------------------------------------------------------------------------------------------------
/// @brief the increment for the wheel zoom
//----------------------------------------------------------------------------------------------------------------------
const static float ZOOM = 0.1f;

NGLScene::NGLScene()
{
  // re-size the widget to that of the parent (in this case the GLFrame passed in on construction)
  m_rotate = false;
  // mouse rotation values set to 0
  m_spinXFace = 0;
  m_spinYFace = 0;
  setTitle("Multiple Point Lights");
}

NGLScene::~NGLScene()
{
  std::cout << "Shutting down NGL, removing VAO's and Shaders\n";
}

void NGLScene::resizeGL(int _w, int _h)
{
  m_project = ngl::perspective(45.0f, (float)_w / _h, 0.05f, 350.0f);
  m_width = _w * devicePixelRatio();
  m_height = _h * devicePixelRatio();
}

void NGLScene::initializeGL()
{
  // we must call this first before any other GL commands to load and link the
  // gl commands from the lib, if this is not done program will crash
  ngl::NGLInit::initialize();

  glClearColor(0.4f, 0.4f, 0.4f, 1.0f); // Grey Background
  // enable depth testing for drawing
  glEnable(GL_DEPTH_TEST);
  glEnable(GL_MULTISAMPLE);
  // we are creating a shader called MultipleLights
  ngl::ShaderLib::createShaderProgram("MultipleLights");
  // now we are going to create empty shaders for Frag and Vert
  ngl::ShaderLib::attachShader("MultipleLightsVertex", ngl::ShaderType::VERTEX);
  ngl::ShaderLib::attachShader("MultipleLightsFragment", ngl::ShaderType::FRAGMENT);
  // attach the source
  ngl::ShaderLib::loadShaderSource("MultipleLightsVertex", "shaders/MultiplePointLightVert.glsl");
  ngl::ShaderLib::loadShaderSource("MultipleLightsFragment", "shaders/MultiplePointLightFrag.glsl");
  // compile the shaders
  ngl::ShaderLib::compileShader("MultipleLightsVertex");
  ngl::ShaderLib::compileShader("MultipleLightsFragment");
  // add them to the program
  ngl::ShaderLib::attachShaderToProgram("MultipleLights", "MultipleLightsVertex");
  ngl::ShaderLib::attachShaderToProgram("MultipleLights", "MultipleLightsFragment");

  // now we have associated this data we can link the shader
  ngl::ShaderLib::linkProgramObject("MultipleLights");
  // and make it active ready to load values
  ngl::ShaderLib::use("MultipleLights");
  ngl::ShaderLib::printRegisteredUniforms("MultipleLights");
  // now we need to set the material and light values
  /*
   *struct MaterialInfo
   {
        // Ambient reflectivity
        vec3 Ka;
        // Diffuse reflectivity
        vec3 Kd;
        // Specular reflectivity
        vec3 Ks;
        // Specular shininess factor
        float shininess;
  };*/
  ngl::ShaderLib::setUniform("material.Ka", 0.4f, 0.4f, 0.4f);
  // red diffuse
  ngl::ShaderLib::setUniform("material.Kd", 1.0f, 1.0f, 1.0f);
  // white spec
  ngl::ShaderLib::setUniform("material.Ks", 1.0f, 1.0f, 1.0f);
  ngl::ShaderLib::setUniform("material.shininess", 20.0f);
  // now for  the lights values (all set to white)
  /*struct LightInfo
  {
  // Light position in eye coords.
  vec4 position;
  // Ambient light intensity
  vec3 La;
  // Diffuse light intensity
  vec3 Ld;
  // Specular light intensity
  vec3 Ls;
  };*/
  // this data was generated by my light dome tool
  GLfloat positions[] = {
      -4.279f, 2.06819f, 1.5533f, 4.86468f, 0.0153398f, 1.15529f,
      -0.79594f, 4.92105f, 0.386964f, 0.859757f, 4.34285f, -2.32388f,
      2.34462f, 3.39738f, 2.82145f, 1.71452f, 4.67046f, 0.497201f,
      0.875125f, 4.73547f, 1.34516f, 0.481648f, 4.8963f, -0.89121f,
      -1.22515f, 3.38046f, 3.4744f, 4.70511f, 0.0153398f, -1.69166f,
      4.49673f, 0.00766949f, -2.18618f, -4.52646f, 0.0153398f, -2.12389f,
      1.27728f, 4.28864f, 2.23072f, 0.641939f, 4.95855f, 0.0266027f,
      0.994878f, 4.81477f, 0.910079f, -0.434167f, 4.94811f, -0.572456f,
      -2.34066f, 4.28074f, 1.0939f, 2.48517f, 4.29258f, 0.630612f,
      0.0659806f, 4.82697f, 1.3023f, -1.2889f, 3.38046f, -3.45126f};

  GLfloat colours[] = {
      0.0294922f, 0.0140869f, 0.00583496f, 0.0105774f, 0.0153564f, 0.0223511f,
      0.0307617f, 0.0132324f, 0.00444031f, 0.00517273f, 0.00758057f, 0.0123474f,
      0.00786743f, 0.0118896f, 0.0183716f, 0.0609863f, 0.0765137f, 0.0846191f,
      0.0485596f, 0.0646484f, 0.0788574f, 0.0232666f, 0.0159668f, 0.0126709f,
      0.0133301f, 0.00983276f, 0.00909424f, 0.00621948f, 0.00994873f, 0.0161011f,
      0.00406799f, 0.00239716f, 0.0013855f, 0.0313721f, 0.0149292f, 0.0061554f,
      0.0305176f, 0.0415771f, 0.0527344f, 0.0296875f, 0.0298828f, 0.0276367f,
      0.067334f, 0.0844238f, 0.0954102f, 0.0060791f, 0.0039917f, 0.00276794f,
      0.0229614f, 0.0107727f, 0.00412598f, 0.035376f, 0.04646f, 0.0565918f,
      0.0148682f, 0.0121704f, 0.0106323f, 0.0171753f, 0.00960693f, 0.00534973f};
  int index = 0;
  for (int i = 0; i < 20; ++i)
  {
    // char name[50];
    // sprintf(name,"light[%d]",i);
    std::string name = fmt::format("light[{0}]", i);
    ngl::ShaderLib::setUniform(name + ".position", positions[index], positions[index + 1], positions[index + 2]);
    ngl::ShaderLib::setUniform(name + ".Ld", colours[index], colours[index + 1], colours[index + 2]);
    ngl::ShaderLib::setUniform(name + ".Ls", colours[index], colours[index + 1], colours[index + 2]);

    ngl::ShaderLib::setUniform(name + ".La", 0.0f, 0.0f, 0.0f);

    index += 3;
  }

  // Now we will create a basic Camera from the graphics library
  // This is a static camera so it only needs to be set once
  // First create Values for the camera position
  ngl::Vec3 from(0, 0.0, 5);
  ngl::Vec3 to(0, 0, 0);
  ngl::Vec3 up(0, 1, 0);
  // now load to our new camera
  m_view = ngl::lookAt(from, to, up);
  // set the shape using FOV 45 Aspect Ratio based on Width and Height
  // The final two are near and far clipping planes of 0.5 and 10
  m_project = ngl::perspective(45, 720.0f / 576.0f, 0.05f, 350);
  ngl::VAOPrimitives::createTrianglePlane("plane", 30, 30, 20, 20, ngl::Vec3(0, 1, 0));
}

void NGLScene::loadMatricesToShader()
{
  ngl::Mat4 MV;
  ngl::Mat4 MVP;
  ngl::Mat3 normalMatrix;
  ngl::Mat4 M;
  M = m_transform.getMatrix();
  MV = m_view * m_mouseGlobalTX * M;
  MVP = m_project * MV;
  normalMatrix = MV;
  normalMatrix.inverse().transpose();
  ngl::ShaderLib::setUniform("MVP", MVP);
  ngl::ShaderLib::setUniform("MV", MV);
  ngl::ShaderLib::setUniform("normalMatrix", normalMatrix);
}

void NGLScene::paintGL()
{
  // clear the screen and depth buffer
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  glViewport(0, 0, m_width, m_height);
  ngl::ShaderLib::use("MultipleLights");
  // Rotation based on the mouse position for our global transform
  auto rotX = ngl::Mat4::rotateX(m_spinXFace);
  auto rotY = ngl::Mat4::rotateY(m_spinYFace);
  // multiply the rotations
  m_mouseGlobalTX = rotY * rotX;
  // add the translations
  m_mouseGlobalTX.m_m[3][0] = m_modelPos.m_x;
  m_mouseGlobalTX.m_m[3][1] = m_modelPos.m_y;
  m_mouseGlobalTX.m_m[3][2] = m_modelPos.m_z;
  // draw
  m_transform.reset();
  loadMatricesToShader();
  ngl::VAOPrimitives::draw("teapot");
  m_transform.setPosition(0, -0.45f, 0);
  loadMatricesToShader();
  ngl::VAOPrimitives::draw("plane");
}

//----------------------------------------------------------------------------------------------------------------------
void NGLScene::mouseMoveEvent(QMouseEvent *_event)
{
// note the method buttons() is the button state when event was called
// this is different from button() which is used to check which button was
// pressed when the mousePress/Release event is generated
#if QT_VERSION > QT_VERSION_CHECK(6, 0, 0)
  auto position = _event->position();
#else
  auto position = _event->pos();
#endif

  if (m_rotate && _event->buttons() == Qt::LeftButton)
  {
    int diffx = position.x() - m_origX;
    int diffy = position.y() - m_origY;
    m_spinXFace += (float)0.5f * diffy;
    m_spinYFace += (float)0.5f * diffx;
    m_origX = position.x();
    m_origY = position.y();
    update();
  }
  // right mouse translate code
  else if (m_translate && _event->buttons() == Qt::RightButton)
  {
    int diffX = (int)(position.x() - m_origXPos);
    int diffY = (int)(position.y() - m_origYPos);
    m_origXPos = position.x();
    m_origYPos = position.y();
    m_modelPos.m_x += INCREMENT * diffX;
    m_modelPos.m_y -= INCREMENT * diffY;
    update();
  }
}

//----------------------------------------------------------------------------------------------------------------------
void NGLScene::mousePressEvent(QMouseEvent *_event)
{
// this method is called when the mouse button is pressed in this case we
// store the value where the maouse was clicked (x,y) and set the Rotate flag to true
#if QT_VERSION > QT_VERSION_CHECK(6, 0, 0)
  auto position = _event->position();
#else
  auto position = _event->pos();
#endif

  if (_event->button() == Qt::LeftButton)
  {
    m_origX = position.x();
    m_origY = position.y();
    m_rotate = true;
  }
  // right mouse translate mode
  else if (_event->button() == Qt::RightButton)
  {
    m_origXPos = position.x();
    m_origYPos = position.y();
    m_translate = true;
  }
}

//----------------------------------------------------------------------------------------------------------------------
void NGLScene::mouseReleaseEvent(QMouseEvent *_event)
{
  // this event is called when the mouse button is released
  // we then set Rotate to false
  if (_event->button() == Qt::LeftButton)
  {
    m_rotate = false;
  }
  // right mouse translate mode
  if (_event->button() == Qt::RightButton)
  {
    m_translate = false;
  }
}

//----------------------------------------------------------------------------------------------------------------------
void NGLScene::wheelEvent(QWheelEvent *_event)
{

  // check the diff of the wheel position (0 means no change)
  if (_event->angleDelta().x() > 0)
  {
    m_modelPos.m_z += ZOOM;
  }
  else if (_event->angleDelta().x() < 0)
  {
    m_modelPos.m_z -= ZOOM;
  }
  update();
}
//----------------------------------------------------------------------------------------------------------------------

void NGLScene::keyPressEvent(QKeyEvent *_event)
{
  // this method is called every time the main window recives a key event.
  // we then switch on the key value and set the camera in the GLWindow
  switch (_event->key())
  {
  // escape key to quite
  case Qt::Key_Escape:
    QGuiApplication::exit(EXIT_SUCCESS);
    break;
  // turn on wirframe rendering
  case Qt::Key_W:
    glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
    break;
  // turn off wire frame
  case Qt::Key_S:
    glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
    break;
  // show full screen
  case Qt::Key_F:
    showFullScreen();
    break;
  // show windowed
  case Qt::Key_N:
    showNormal();
    break;

  default:
    break;
  }
  // finally update the GLWindow and re-draw
  // if (isExposed())
  update();
}
